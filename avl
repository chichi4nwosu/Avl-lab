public class AVLTree <E extends Comparable<E>> extends SearchTree<E>{
    
    public boolean add(E data)
    {
        return insert(data);
    }

    public boolean insert(E data)
    {
        // This method should use a recursive helper.  It returns
    	// the tree that results from inserting data 
    	// into t. It has a similar structure to add from BST.  It
    	// starts by asking if tree is empty, and if so it sets the
    	// a new leaf node as the root. If tree is not empty you can compare
    	// data to the current node's data and take action based on this comparison.
    	// When you create a new leaf node you should 
		// increment the tree's size variable. When you return from a 
    	// recursive call that updates one of t's children
    	// (e.g. curr.leftChild = insertHelper(data, curr.left))
		// you should check the AVL property and possibly 
    	// call updateHeight(), and then recompute curr's height.
    	overallRoot = insertHelper(data, (AVLNode<E>) overallRoot);
        return true;
    }
    private AVLNode<E> insertHelper(E data, AVLNode<E> curr) {
    	// if there is nothing in the ciode then you just add the new node
        if (curr == null) {
            curr = new AVLNode<>(data);
        } 
        // otherwise if when comparing to a node, the og node is less than the node they want to insert the go left
        else if (data.compareTo(curr.data) < 0) {
        	// recur and go left now andcompre again
            curr.left = insertHelper(data, (AVLNode<E>) curr.left);
        } else {
        	// otherwise if ur not going left the only other way you can go is right so you go right
            curr.right = insertHelper(data, (AVLNode<E>) curr.right);
        }
        // update the height of the ne avl tree
        updateHeight(curr);
        // make sure the avl tree is balanced w this method
        return balance(curr);
    }
    private void updateHeight(AVLNode<E> curr) {
		// TODO Auto-generated method stub
		
	}

	private AVLNode<E> balance(AVLNode<E> curr) {
		// if the balance factor is less than -1 or greater than 1 its unbalanced
        if (curr.bf() < -1) {
            if (((AVLNode<E>) curr.left).bf() > 0) {
            	// call rotate left
                curr.left = rotateLeft((AVLNode<E>) curr.left);
            }
            curr = rotateRight(curr);
        } 
        
        else if (curr.bf() > 1) {
            if (((AVLNode<E>) curr.right).bf() < 0) {
            	// call rotate right
                curr.right = rotateRight((AVLNode<E>) curr.right);
            }
            curr = rotateLeft(curr);
        }
        // the new balanced overall root
        return curr;
    }
    // TODO: IMPLEMENT THE FOLLOWING METHODS BASED ON THE JAVADOC COMMENTS
  
    /**
     * Perform a single rotation to the right of a tree rooted at the current node.
     * Consider the following illustrations (called on the node A):
     *
     *        A       =>     B
     *       / \      =>    / \
     *      B   T3    =>  T1   A
     *     / \        =>      / \
     *   T1   T2      =>    T2   T3
     *
     * Note that A's original parent (if it exists) will need to become B's new
     * parent. 
     *
     * @return The new root of this subtree (node B).
     */
    public AVLNode<E> rotateRight(AVLNode<E> oldRoot) {
        // TODO: Implement this method.  Return the new root B.
        // Do not forget to change A's parent (if it exists) to be
        // aware of B as the new root by returning the new root and setting the
        // parent's pointer when we call rotateRight(node).
    	
    	 AVLNode<E> newRoot = (AVLNode<E>) oldRoot.left;
    	 oldRoot.left = newRoot.right;
    	 newRoot.right = oldRoot;
    	 updateHeight(oldRoot);
    	 updateHeight(newRoot);
    	 return newRoot;
    }

    /**
     * Perform a single rotation to the left of a tree rooted at the current node.
     * Consider the following illustrations (called on the node A):
     *
     *      A         =>       B
     *     / \        =>      / \
     *   T1   B       =>     A   T3
     *       / \      =>    / \
     *     T2   T3    =>  T1   T2
     *
     * Note that A's original parent (if it exists) will need to become B's new
     * parent. 
     *
     * @return The new root of this subtree (node B).
     */
    public AVLNode<E> rotateLeft(AVLNode<E> oldRoot) {
        // TODO: Implement this method. Return the new root B. 
        // Do not forget to change A's parent (if it exists) to be
        // aware of B as the new root by returning the new root and setting the
        // parent's pointer when we call rotateRight(node).
        AVLNode<E> newRoot = (AVLNode<E>) oldRoot.right;
        oldRoot.right = newRoot.left;
        newRoot.left = oldRoot;
        updateHeight(oldRoot);
        updateHeight(newRoot);
        return newRoot;
    }

    /* WAIT TO WORK ON THIS!!!
    public boolean remove(E data) {
        int initialSize = getSize();
        overallRoot = removeHelper(data, (AVLNode<E>) overallRoot);
        return getSize() < initialSize;
    }

    private AVLNode<E> removeHelper(E data, AVLNode<E> curr) {
        if (curr == null) {
            return null; // Data not found, return null
        }
        else {
	        if (data.compareTo(curr.data) < 0) {
	            curr.left = removeHelper(data, (AVLNode<E>) curr.left); // Recursively remove from the left subtree
	        } 
	        else if (data.compareTo(curr.data) > 0) {
	            curr.right = removeHelper(data, (AVLNode<E>) curr.right); // Recursively remove from the right subtree
	        } 
	        else {
	            // Node to be removed found
	            if (curr.left == null || curr.right == null) {
	                // Node has 0 or 1 child
	                curr = (curr.left == null) ? (AVLNode<E>) curr.right : (AVLNode<E>) curr.left;
	                size--;
	            } else {
	                // Node has 2 children
	                AVLNode<E> successor = findSuccessor((AVLNode<E>) curr.right);
	                curr.data = successor.data;
	                curr.right = removeHelper(successor.data, (AVLNode<E>) curr.right); // Remove the successor
	            }
	        }
	        // Rebalance and update height
	        return balance(curr);
        }
    }

    private AVLNode<E> findSuccessor(AVLNode<E> node) {
        while (node.left != null) {
            node = (AVLNode<E>) node.left;
        }
        return node;
    }*/

    // This will help you with debugging. It prints the keys
   // on each level of the tree.
   public void treePrinter() {
    for (int level = 0; level < ((AVLNode<E>)overallRoot).height(); level++ ) {
        System.out.printf("Level %d: ", level);
        printLevel(level, (AVLNode<E>)overallRoot);
        System.out.println();
    }
}

    public void printLevel(int level, AVLNode<E> t) {
        if (t != null) {
            if (level == 0)
                System.out.printf(  "%s ", t.data);
            else {
                printLevel(level-1, (AVLNode<E>)t.left);
                printLevel(level-1, (AVLNode<E>)t.right);
            }
        }
    }
}
